#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>

#define FT_IP_PORT      9999
#define MAX_CLIENTS     5
#define MAX_BLOCK_SIZE  256

char acFileDirectory[MAX_BLOCK_SIZE];

void * handleClientRequestThread(void *argv)
{
    int iSock = *((int *)argv);
    int iBytesRead;
    char acClientMsg[MAX_BLOCK_SIZE];
    char acFileName[MAX_BLOCK_SIZE*2];
    FILE *pInFile;

    memset(acClientMsg, 0, sizeof(acClientMsg));

    // Receive message from client - file name to transfer
    recv(iSock, acClientMsg, MAX_BLOCK_SIZE, 0);

    // Get full path name
    sprintf(acFileName, "%s/%s", acFileDirectory, acClientMsg);

    printf("File requested: %s\n", acFileName);

    if ((pInFile = fopen(acFileName, "r")) != NULL)
    {
        while (!feof(pInFile))
        {
            iBytesRead = fread(acClientMsg, MAX_BLOCK_SIZE, 1, pInFile);
            send(iSock, acClientMsg, iBytesRead, 0);
        }
    }
    else
    {
        // TODO: Send error code to remote end
        printf("File not found\n");
    }

    close(iSock);

    pthread_exit(NULL);
}

int main(int argc, char *argv[])
{
    int iSockFd, iClientSockFd;
    struct sockaddr_in sSockAddr;
    struct sockaddr_storage sSockStore;
    socklen_t sSockStoreSize = sizeof(sSockStore);
    pthread_t tid;

    // Get file directory from command line or default to current directory
    if (argc > 1)
    {
	strcpy(acFileDirectory, argv[1]);
     }
    else
    {
        getcwd(acFileDirectory, sizeof(acFileDirectory));
    }

    printf("Working directory: %s\n", acFileDirectory);

    // Create TCP socket and bind
    memset(&sSockAddr, 0, sizeof(sSockAddr));
    sSockAddr.sin_family = AF_INET;
    sSockAddr.sin_port = htons(FT_IP_PORT);
    sSockAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    if ((iSockFd = socket(PF_INET, SOCK_STREAM, 0)) == 0)
    {	
        printf("Socket Error: failed to create socket\n");
        exit(EXIT_FAILURE);
    }

    if (bind(iSockFd, (struct sockaddr *) &sSockAddr, sizeof(sSockAddr)) < 0)
    {	
        printf("Socket Error: failed to bind socket\n");
        exit(EXIT_FAILURE);
    }

    // Listen on socket for client connections
    if (listen(iSockFd, MAX_CLIENTS) != 0)
    {
        printf("Socket Error: listen failed\n");
        exit(EXIT_FAILURE);
    }

    if (bind(iSockFd, (struct sockaddr *) &sSockAddr, sizeof(sSockAddr)) < 0)
    {	
        printf("Socket Error: failed to bind socket\n");
        exit(EXIT_FAILURE);
    }

    // Listen on socket for client connections
    if (listen(iSockFd, MAX_CLIENTS) != 0)
    {
        printf("Socket Error: listen failed\n");
        exit(EXIT_FAILURE);
    }
    while(1)
    {
        iClientSockFd = accept(iSockFd, (struct sockaddr *) &sSockStore, &sSockStoreSize);

        if (pthread_create(&tid, NULL, handleClientRequestThread, &iClientSockFd) != 0)
        {
            printf("Socket Error: listen failed\n");
            exit(EXIT_FAILURE);
        }
    }
}
